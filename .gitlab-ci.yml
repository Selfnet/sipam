variables:
  POSTGRES_USER: sipam
  POSTGRES_PASSWORD: sipam
  POSTGRES_DB: sipam
  POETRY_VERSION: "1.5.1"
  prometheus_multiproc_dir: /tmp
  KUBECONFORM_VERSION: "0.4.8"
  nodejs_version: "20"
  python_version: "3.11"

stages:
  - test
  - build
  - build_containers

eslint:
  image: node:${nodejs_version}-alpine
  stage: test
  before_script:
    - cd frontend
    - yarn install
  script:
    - yarn lint

yarn_build:
  image: node:${nodejs_version}-alpine
  stage: build
  before_script:
    - cd frontend
    - yarn install
  script:
    - yarn build
  artifacts:
    paths:
      - frontend/dist

helm_build:
  image: docker.io/dtzar/helm-kubectl:3.5.0
  stage: build
  before_script:
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - helm repo add selfnet "${NEXUS_URL}/repository/selfnet-helm/" --username "${NEXUS_USERNAME}" --password "${NEXUS_PASSWORD}"
  script:
    - helm dependency build deploy/helm/sipam
    - helm package deploy/helm/sipam
    - curl -T *.tgz -v -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" "${NEXUS_URL}/repository/selfnet-helm/"
  needs:
    - helm_lint
  only:
    - tags

helm_lint:
  image: docker.io/dtzar/helm-kubectl:3.5.0
  stage: test
  before_script:
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - wget "https://github.com/yannh/kubeconform/releases/download/v${KUBECONFORM_VERSION}/kubeconform-linux-amd64.tar.gz"
    - tar xzvf kubeconform-linux-amd64.tar.gz kubeconform
    - mv kubeconform /kubeconform
    - chmod +x /kubeconform
  script:
    - |
      bash -c "! grep -r -I -n '[[:blank:]]$' deploy/"
    - helm dependency build deploy/helm/sipam
    - helm lint deploy/helm/sipam
    - helm template sipam deploy/helm/sipam | /kubeconform -ignore-missing-schemas -summary

flake8:
  image: python:${python_version}-bullseye
  stage: test
  before_script:
    - cd backend
    - pip install "poetry==${POETRY_VERSION}"
    - poetry install --only dev
  script:
    - poetry run flake8 .

pytest:
  image: python:${python_version}-bullseye
  services:
    - postgres:latest
  stage: test
  before_script:
    - cd backend
    - pip install "poetry==${POETRY_VERSION}"
    - poetry install
  script:
    - poetry run coverage run -m pytest
    - poetry run coverage report

backend_container:
  image: quay.io/redhat-github-actions/buildah-runner:latest
  stage: build_containers
  before_script:
    - export BUILDAH_FORMAT=docker
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah bud -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA -f Containerfile backend
    - buildah push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
    - if [ "$CI_COMMIT_REF_NAME" == "main" ]; then buildah tag $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/backend:latest; fi
    - if [ "$CI_COMMIT_REF_NAME" == "main" ]; then buildah push $CI_REGISTRY_IMAGE/backend:latest; fi
  needs:
    - flake8
    - pytest
  only:
    - branches

frontend_container:
  image: quay.io/redhat-github-actions/buildah-runner:latest
  stage: build_containers
  before_script:
    - export BUILDAH_FORMAT=docker
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah bud -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA -f Containerfile frontend
    - buildah push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA
    - if [ "$CI_COMMIT_REF_NAME" == "main" ]; then buildah tag $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/frontend:latest; fi
    - if [ "$CI_COMMIT_REF_NAME" == "main" ]; then buildah push $CI_REGISTRY_IMAGE/frontend:latest; fi
  needs:
    - yarn_build
    - eslint
  only:
    - branches

backend_container_release:
  image: quay.io/redhat-github-actions/buildah-runner:latest
  stage: build_containers
  before_script:
    - export BUILDAH_FORMAT=docker
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah bud -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME -f Containerfile backend
    - buildah push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
    - buildah push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME
  needs:
    - flake8
    - pytest
  only:
    - tags

frontend_container_release:
  image: quay.io/redhat-github-actions/buildah-runner:latest
  stage: build_containers
  before_script:
    - export BUILDAH_FORMAT=docker
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah bud -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME -f Containerfile frontend
    - buildah push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA
    - buildah push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME
  needs:
    - yarn_build
    - eslint
  only:
    - tags
